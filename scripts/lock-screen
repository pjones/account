#!/usr/bin/env bash

################################################################################
set -e
set -u

################################################################################
usage() {
  echo "Usage: $(basename "$0") default-image background-color"
}

################################################################################
if [ $# -ne 2 ]; then
  ussage
  exit 1
fi

default_lock_image=$1
background_color=$2
image_cache=$HOME/.cache/lock-screen-images

################################################################################
# Actions to take before locking the screen.
preflight() {
  # Set delay before turning monitor off:
  xset +dpms dpms 300 600 900

  # Stop the compositor since it breaks i3lock:
  systemctl --user stop picom.service || :

  # Stop the music player:
  player-mpris-tail stop || :
}

################################################################################
restore() {
  xset dpms 0 0 0
  systemctl --user start picom.service || :
}
trap restore EXIT

################################################################################
# Generate an image name that goes in the cache.
gen_cache_name() {
  local image=$1
  local sum

  sum=$(sha256sum "$image" | cut -d' ' -f1)
  echo "$image_cache/$sum.png"
}

################################################################################
# Try to figure out the width of the primary monitor.
get_monitor_width() {
  xrandr |
    grep 'connected primary' |
    cut -d' ' -f4 |
    cut -dx -f1
}

################################################################################
# Resize an image to fit the primary monitor and store it in the cache.
resize() {
  local image=$1
  local cache=$2

  mkdir -p "$(dirname "$cache")"

  convert \
    -resize "$(get_monitor_width || echo 1920)" \
    "$image" "$cache"
}

################################################################################
preflight &

# Find an image to use:
file=$(random-file -i \
  -d ~/documents/pictures/backgrounds/lock-screen \
  -D "$default_lock_image")

# See if the file is in the cache:
cache=$(gen_cache_name "$file")

if [ -e "$cache" ]; then
  image=$cache
else
  # Generate the cached image in the background:
  image=$default_lock_image
  resize "$file" "$cache" &
fi

# Lock it!
i3lock \
  --nofork \
  --image="$image" \
  --color="$background_color" \
  --ignore-empty-password \
  --show-failed-attempts
